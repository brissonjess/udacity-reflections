1.) When would you want to use a remote repository rather than keeping all your work local?
    You would want to use a remote repository to keep collaboration, or personal, projects organzied. It is also a nice way to get feed back on your work from an online community. And as an extra bonus you can get inspiration from looking at other people's projects as well. 
2.) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
	Pulling changes manually ensures that the content that you're pulling from an online repository are the portions that you actually want to use in your project. For instance, if you were working on a game with a friend or co-worker and they were developing an easy mode and you were developing a normal mode then you wouldn't want git to start automatically pulling content from the easy mode and screw up the version that you were working on. Being able to control when content is pulled and merged is very important to creating a working, production-level project.
3.) Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Forks: Forks are Github's method of cloning repositories between other Github members. This allows for the easy sharing and collaboration of projects. 
	Clones: Clones are a copy of a repository on your local machine. You can clone a local repository or one from online or on Github. 
	Branches: Branches are a division of your repository. They allow you to work on different segments of a project without affecting the master production file. 
	It would be good to use a branch when you want to test or add a new feature to a project. You would want to clone a repository when you want to work on a project on your local machine. And it would be great to Fork a repository when you want to add to a project that you found online. 
4.) What is the benefit of having a copy of the last known state of the remote stored locally?
	Have the last known state of a remote stored locally allows you to backup your work and ensure that you and your collaborators are working on an up to date file.
5.) How would you collaborate without using Git or GitHub? What would be easier, and what would be harder? 
	I suppose you could use a spreadsheet to log all of the requests, pulls, branches, collaberators and project updates. But that would make for a lot of reading and book keeping. Git and Github already store who is working on a branch and the changes / commits they have made to it. Since the two management systems do a lot of the grunt work for you I couldn't imagine using a different system. 
6.) When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	You should make changes in a separate branch if you had a change that you wanted to get your teammate's opinion on. For instance, in this lesson one suggestion was made that canola oil should used instead of vegetable, and there was another that suggested that more oil be added to the recipe to make it more moist. Since both of these suggestions were going to effect the same section of the project both contributors made their suggestions, pushed them to github and then got the suggestions reviewed before pushing the big green commit button. This was a good plan because then all contributors knew what changes were being made and could catch any errors that were made in the editing process. 
	The benefits of making changes in a master branch would mean that any changes would take effect immediately. The only downside is that there would be some serious merging conflicts if you were working on the same section as another teammate. 