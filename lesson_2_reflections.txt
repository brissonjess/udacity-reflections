1.) What happens when you initialize a repository? Why do you need to do it?
	Git realizes that you would like it to track the files in your
	directory and sets up the environment to do so. You need to do
	this so Git knows which files it should track and which ones
	you do not want to track. 
2.) How is the staging area different from the working directory and the repository? What value do you think it offers?
	It is the in between point where you can add your file(s)
	that you want tracked, make changes to them, and then
	commit the changes into the working directory / repository.
3.) How can you use the staging area to make sure you have one commit per logical change?
	You can compare the status of the files that have been moved to staging to the ones that are in the repository and the working directory. By seeing what changes have been commited to each of the files a developer can better determine which documents should be considered a logical change.
4.) What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	-git branches keep you organized when you're working on a project with a team
	-create a new branch whenever you move onto a new piece of work. Think of it as context switching, like when you go to make a new feature.
	-master branch is the production quality branch, that never breaks and always works
	-development branch is where you do a lot of your work
	-then you might have a experimental or unique feature branch that you want to share with people with the understanding that these are not production quality changes
	-also good if you're collabertating with yourself, branches allow you to context switch. If you are working on a new development feature and you notice a bug then you can switch to a different context, fix the bug, and then go back to you development branch and continue working on your feature. 